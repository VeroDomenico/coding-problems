//Attempt one
// func search(nums []int, target int) int {

// 	// In case the nums is a single elem just check and return
// 	if len(nums) == 1 && nums[0] == target {
// 		return 0
// 	}

// 	loc := 0
// 	for len(nums) != 1 {
// 		idx := len(nums) / 2
// 		if len(nums) == 2 && nums[0] == target {
// 			return loc
// 		} else if len(nums) == 2 && nums[1] == target {
// 			return loc + 1
// 		} else if nums[idx] == target {
// 			return loc + idx
// 		} else if nums[idx] > target {
// 			//Check buttom half of list
// 			nums = nums[:idx]
// 		} else {
// 			//Check top side of list
// 			nums = nums[idx:]
// 			loc += idx
// 		}

// 	}
// 	if len(nums) == 1 && nums[0] == target {
// 		return loc
// 	}
// 	return -1
// }

//Attempt two optimized
func search(nums []int, target int) int {

	// setting right to length of list and left to 0
	for left, right := 0, len(nums)-1; left <= right; {
		mid := (left + right) / 2 //middle of list is the current left most portion and the right most
		if nums[mid] == target {
			// if the middle is equal to the target
			return mid
		} else if nums[mid] < target {
			// bring left ptr to the middle +1
			left = mid + 1
		} else {
			// bring the right ptr to the middle and -1 because do not want to include the prev mid
			right = mid - 1
		}
	}
	return -1
}
